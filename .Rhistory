+ Energy*Instrumentalness + Key*Acousticness + Key*Liveness +
Loudness*Release.Year + Mode*Tempo + Acousticness*Instrumentalness +
Acousticness*genreSimplified + Valence*Release.Year
+ Release.Year*genreSimplified, data = spotifyTrain)
vif(lm1)
vif(lm2)
#model with only significant interaction terms
lm3 <- lm(Popularity ~ Explicit + Energy + Key + Loudness + Mode + Speechiness
+ Acousticness + Instrumentalness + Liveness + Valence + Tempo +
Time.Signature + Release.Year + genreSimplified +
Explicit*Valence + Explicit*Release.Year + Explicit*genreSimplified
+ Danceability*Energy + Danceability*Liveness + Energy*Key +
+ Energy*Instrumentalness + Key*Acousticness + Key*Liveness +
Loudness*Release.Year + Mode*Tempo + Acousticness*Instrumentalness +
Acousticness*genreSimplified + Valence*Release.Year
+ Release.Year*genreSimplified, data = spotifyTrain)
summary(lm3)
lm4 <- lm(Popularity ~  Energy + Loudness + Speechiness
+ Acousticness + Liveness + Valence +
Time.Signature + Release.Year +
Explicit*Valence + Explicit*Release.Year + Explicit*genreSimplified
+ Danceability*Energy + Danceability*Liveness + Energy*Key +
+ Energy*Instrumentalness + Key*Acousticness + Key*Liveness +
Loudness*Release.Year + Mode*Tempo + Acousticness*Instrumentalness +
Acousticness*genreSimplified + Valence*Release.Year
+ Release.Year*genreSimplified, data = spotifyTrain)
summary(lm4)
set.seed(213)
## use 80% of data to train
ntrain = as.integer(nrow(spotify) * 0.8)
## shuffle the rows
shuffled_index = sample(nrow(spotify))
train.index = shuffled_index[1:ntrain]
spotifyTrain = spotify[train.index,]
spotifyTest = spotify[-train.index,]
dim(spotifyTrain)
dim(spotifyTest)
lm1 = lm(Popularity ~ (.), data = spotifyTrain)
summary(lm1)
AIC(lm1)
AIC(lm2)
AIC(lm3)
ncvTest(lm1)
lm2 <- lm(Popularity ~ .^2, data = spotifyTrain)
summary(lm2)
colnames(Spotify)
colnames(spotify)
#model with only significant interaction terms
lm3 <- lm(Popularity ~ Explicit + Danceability + Energy + Key + Loudness + Mode + Speechiness
+ Acousticness + Instrumentalness + Liveness + Valence + Tempo +
Time.Signature + Release.Year + genreSimplified +
Explicit*Valence + Explicit*Release.Year + Explicit*genreSimplified
+ Danceability*Energy + Danceability*Liveness + Energy*Key +
+ Energy*Instrumentalness + Key*Acousticness + Key*Liveness +
Loudness*Release.Year + Mode*Tempo + Acousticness*Instrumentalness +
Acousticness*genreSimplified + Valence*Release.Year
+ Release.Year*genreSimplified, data = spotifyTrain)
summary(lm3)
vif(lm1)
vif(lm2)
# create helper function to find mse and rmse
errors = function(mod, test) {
preds = predict(mod, test)
err = test$Popularity - preds
rmse = sqrt(mean(err^2))
mse = mean(abs(err))
c(mse, rmse)
}
errors(lm1, spotifyTest)
# create helper function to find mse and rmse
errors = function(mod, test) {
preds = predict(mod, test)
err = test$Popularity - preds
mse = mean(abs(err))
rmse = sqrt(mean(err^2))
c(mse, rmse)
}
errors(lm1, spotifyTest)
summary(lm1)
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(RCurl)
library(car)
library(corrplot)
library(caret)
library(forecast)
url <- getURL("https://raw.githubusercontent.com/christyhui/Stats402-Spotify_Project/refs/heads/main/top_10000_1950-now.csv")
spotify <- read.csv(text = url)
#column names
colnames(spotify)
#column classes
lapply(spotify, class)
#missing data in each column
lapply(spotify, function(x) sum(is.na(x)))
# find indexes of NAs in Danceability column
danceabilityNA = spotify[is.na(spotify$Danceability), ]
# since all the NAs are between danceability and time.signature columns,
# we find the column index of both so we can simply output the results
# and see if all the NAs exist in one area
first_index = which(colnames(danceabilityNA) == "Danceability")
second_index = which(colnames(danceabilityNA) == "Time.Signature")
head(danceabilityNA[, first_index:second_index])
# delete album genres column
spotify = spotify[, -c(which(colnames(spotify) == "Album.Genres"))]
spotify = drop_na(spotify)
#clean up year column
spotify$Release.Year = unlist(lapply(spotify$Album.Release.Date,
function(x) substr(x, 1, 4)))
#histrogram of years in popularity
hist(as.numeric(spotify$Release.Year),
xlab = "Years From 1950 to 2030",
ylab = "Frequency",
main = "Distribution of Years in Popularity Variable",
breaks = "FD",
xlim = c(1950, 2030))
#histogram of popularity
hist(spotify$Popularity,
xlab = "Popularity Score",
ylab = "Frequency",
main = "Distribution of Popularity Scores",
breaks = "FD")
#same plot with nonzero popularity
hist(spotify$Popularity[!spotify$Popularity == 0 ],
xlab = "Popularity Score",
ylab = "Frequency",
main = "Distribution of Non-Zero Popularity Scores",
breaks = "FD")
spotify_nonzero_pop <- spotify %>%
filter(Popularity > 0 )
big_genres = c(
"pop",
"rock",
"jazz",
"hip hop",
"rap")
for(genre in big_genres){
genre_count <- sum(grepl(genre, spotify_nonzero_pop$Artist.Genres))
str <- paste(genre,":", genre_count)
print(str)
}
colnames(spotify)
# add only the variables we are interested in
columns = c("Popularity", "Artist.Genres", "Explicit", colnames(spotify)[first_index:second_index], "Release.Year")
spotify = spotify[, columns]
colnames(spotify)
# take away the ones that have a popularity of 0
spotify = spotify[spotify$"Popularity" > 0, ]
# create helper function to transform genres into pop/rock
transform_genre = function(x) {
if (grepl("pop", x, ignore.case = TRUE) & grepl("rock", x, ignore.case = TRUE)) {
"Both"
} else if (grepl("pop", x, ignore.case = TRUE)) {
"Pop"
} else if (grepl("rock", x, ignore.case = TRUE)) {
"Rock"
} else {
"Other"
}
}
spotify$genreSimplified = unlist(lapply(spotify$Artist.Genres, function(x) transform_genre(x)))
unique(spotify$genreSimplified)
table(spotify$genreSimplified)
barplot(table(spotify$genreSimplified), main = "Count of Pop/Rock/Both/Other", xlab = "Genres")
spotify = subset(spotify, select = -Artist.Genres)
colnames(spotify)
lapply(spotify, class)
spotify$Explicit = as.factor(spotify$Explicit)
spotify$Release.Year = as.numeric(spotify$Release.Year)
spotify$genreSimplified = as.factor(spotify$genreSimplified)
corr_numeric <- spotify %>%
select_if(is.numeric)
# Correlation Matrix
spotify_cor <- cor(corr_numeric)
# Visualization of Correlation Matrix
spotify_corrplot <- corrplot(spotify_cor, method = "color", addCoef.col = 1, number.cex = 0.7)
# interested in the spread of each genre
boxplot(spotify$Popularity~spotify$genreSimplified, xlab = "Genres", ylab = "Popularity", main = "Popularity vs Genres")
hist(spotify$Popularity[spotify$genreSimplified == "Pop"], breaks = "FD", main = "Popularity Distribution of Pop Songs", xlab = "Popularity Score")
# find mean of popularity if the song is a pop song
mean(spotify$Popularity[spotify$genreSimplified == "Pop"])
hist(spotify$Popularity[spotify$genreSimplified == "Rock"], breaks = "FD", main = "Popularity Distribution of Rock Songs", xlab = "Popularity Score")
# find mean of popularity if the song is a rock song
mean(spotify$Popularity[spotify$genreSimplified == "Rock"])
hist(spotify$Popularity[spotify$genreSimplified == "Both"], breaks = "FD", main = "Popularity Distribution of Pop and Rock Songs", xlab = "Popularity Score")
# find mean of popularity if the song is both a pop and rock song
mean(spotify$Popularity[spotify$genreSimplified == "Both"])
hist(spotify$Popularity[spotify$genreSimplified == "Other"], breaks = "FD", main = "Popularity Distribution of Other Songs", xlab = "Popularity Score")
# find mean of popularity if the song is neither a pop nor song
mean(spotify$Popularity[spotify$genreSimplified == "Other"])
# determine if means of popularity is different for each group
aov1 = aov(Popularity ~ genreSimplified, data = spotify)
summary(aov1)
sum(spotify$Explicit == "false")
sum(spotify$Explicit == "true")
boxplot(spotify$Popularity~spotify$Explicit, xlab = "Explicit", ylab = "Popularity", main = "Popularity vs Explicit")
# look for normality regarding the popularity of non-explicit songs
hist(spotify$Popularity[spotify$Explicit == "false"], breaks = "FD", main = "Popularity Distribution of Non-Explicit Songs", xlab = "Popularity Score")
# look for normality regarding the popularity of explicit songs
hist(spotify$Popularity[spotify$Explicit == "true"], breaks = "FD", main = "Popularity Distribution of Explicit Songs", xlab = "Popularity Score")
# despite knowing normality is failed for explicit songs, perform the t-test anyway and see if means are independent
t.test(Popularity~Explicit, data = spotify)
table(spotify$genreSimplified, spotify$Explicit)
prop.table(table(spotify$genreSimplified, spotify$Explicit))
# see if both of our categorical variables are independent using chi square test
chisq.test(table(spotify$genreSimplified, spotify$Explicit))
# perform levene's test to see whether or not population variances are equal
leveneTest(Popularity ~ Explicit*genreSimplified, data = spotify)
# determine if adding both into anova helps
aov2 = aov(Popularity ~ Explicit*genreSimplified, data = spotify)
summary(aov2)
interaction.plot(spotify$Explicit, spotify$genreSimplified, spotify$Popularity,
xlab = "Explicit",
ylab = "Mean of Popularity",
trace.label = "Genres")
#set "Other" as reference level for genre
spotify$genreSimplified <- relevel(spotify$genreSimplified, ref = "Other")
levels(spotify$genreSimplified)
set.seed(213)
## use 80% of data to train
ntrain = as.integer(nrow(spotify) * 0.8)
## shuffle the rows
shuffled_index = sample(nrow(spotify))
train.index = shuffled_index[1:ntrain]
spotifyTrain = spotify[train.index,]
spotifyTest = spotify[-train.index,]
dim(spotifyTrain)
dim(spotifyTest)
lm1 = lm(Popularity ~ (.), data = spotifyTrain)
summary(lm1)
lm2 <- lm(Popularity ~ .^2, data = spotifyTrain)
summary(lm2)
#model with only significant interaction terms
lm3 <- lm(Popularity ~ Explicit + Danceability + Energy + Key + Loudness + Mode + Speechiness
+ Acousticness + Instrumentalness + Liveness + Valence + Tempo +
Time.Signature + Release.Year + genreSimplified +
Explicit*Valence + Explicit*Release.Year + Explicit*genreSimplified
+ Danceability*Energy + Danceability*Liveness + Energy*Key +
+ Energy*Instrumentalness + Key*Acousticness + Key*Liveness +
Loudness*Release.Year + Mode*Tempo + Acousticness*Instrumentalness +
Acousticness*genreSimplified + Valence*Release.Year
+ Release.Year*genreSimplified, data = spotifyTrain)
summary(lm3)
vif(lm1)
vif(lm2)
vif(lm3)
# create helper function to find mae and rmse
errors = function(mod, test) {
preds = predict(mod, test)
err = test$Popularity - preds
mae = mean(abs(err))
rmse = sqrt(mean(err^2))
c(mae, rmse)
}
errors(lm1, spotifyTest)
errors(lm2, spotifyTest)
errors(lm3, spotifyTest)
print(paste0("Model 1 R^2: ", summary(lm1)$r.squared))
print(paste0("Model 2 R^2: ", summary(lm2)$r.squared))
print(paste0("Model 3 R^2: ", summary(lm3)$r.squared))
AIC(lm1)
AIC(lm2)
AIC(lm3)
plot(lm1)
ncvTest(lm1)
lm5 <- lm(sqrt(Popularity) ~ (.), data = spotifyTrain)
summary(lm5)
plot(lm5)
#trying weighted least squares
lm_weights <- 1/lm(abs(lm1$residuals) ~ lm1$fitted.values)$fitted.values^2
lm2_weighted <- lm(Popularity ~ (.)^2, data = spotifyTrain, weights = lm_weights)
summary(lm2_weighted)
plot(lm2_weighted)
lambda <- BoxCox.lambda(spotify$Popularity)
boxcox_pop <- spotifyTrain$Popularity^(lambda)
lm1_boxcox <- lm(boxcox_pop ~ . , data=spotifyTrain)
summary(lm1_boxcox)
plot(lm1_boxcox)
train.loocv <- trainControl(method = "LOOCV")
model.loocv1 <- train(Popularity ~ (.), data = spotifyTrain,
method = "lm",
trControl = train.loocv)
print(model.loocv1)
train.rkfold <- trainControl(method = "repeatedcv",
number = 5, repeats = 3)
model.rkfold1 <- train(Popularity ~ (.), data = spotifyTrain,
method = "lm",
trControl = train.rkfold)
print(model.rkfold1)
train.rkfold <- trainControl(method = "repeatedcv",
number = 10, repeats = 3)
model.rkfold2 <- train(Popularity ~ (.), data = spotifyTrain,
method = "lm",
trControl = train.rkfold)
shapiro.test(lm1)
shapiro.test(spotify$Popularity)
spotify$Popularity
shapiro.test(lm1$residuals)
lm1$residuals
ncvTest(lm1)
summary(lm1)$adj.r.squared
summary(lm2)$adj.r.squared
summary(lm3)$adj.r.squared
print(paste0("Model 1 R^2: ", summary(lm1)$adj.r.squared))
print(paste0("Model 2 R^2: ", summary(lm2)$adj.r.squared))
print(paste0("Model 3 R^2: ", summary(lm3)$adj.r.squared))
plot(model.loocv1)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(RCurl)
library(car)
library(corrplot)
library(caret)
library(forecast)
url <- getURL("https://raw.githubusercontent.com/christyhui/Stats402-Spotify_Project/refs/heads/main/top_10000_1950-now.csv")
spotify <- read.csv(text = url)
#column names
colnames(spotify)
#column classes
lapply(spotify, class)
#missing data in each column
lapply(spotify, function(x) sum(is.na(x)))
# find indexes of NAs in Danceability column
danceabilityNA = spotify[is.na(spotify$Danceability), ]
# since all the NAs are between danceability and time.signature columns,
# we find the column index of both so we can simply output the results
# and see if all the NAs exist in one area
first_index = which(colnames(danceabilityNA) == "Danceability")
second_index = which(colnames(danceabilityNA) == "Time.Signature")
head(danceabilityNA[, first_index:second_index])
# delete album genres column
spotify = spotify[, -c(which(colnames(spotify) == "Album.Genres"))]
spotify = drop_na(spotify)
#clean up year column
spotify$Release.Year = unlist(lapply(spotify$Album.Release.Date,
function(x) substr(x, 1, 4)))
#histrogram of years in popularity
hist(as.numeric(spotify$Release.Year),
xlab = "Years From 1950 to 2030",
ylab = "Frequency",
main = "Distribution of Years in Popularity Variable",
breaks = "FD",
xlim = c(1950, 2030))
#histogram of popularity
hist(spotify$Popularity,
xlab = "Popularity Score",
ylab = "Frequency",
main = "Distribution of Popularity Scores",
breaks = "FD")
#same plot with nonzero popularity
hist(spotify$Popularity[!spotify$Popularity == 0 ],
xlab = "Popularity Score",
ylab = "Frequency",
main = "Distribution of Non-Zero Popularity Scores",
breaks = "FD")
spotify_nonzero_pop <- spotify %>%
filter(Popularity > 0 )
big_genres = c(
"pop",
"rock",
"jazz",
"hip hop",
"rap")
for(genre in big_genres){
genre_count <- sum(grepl(genre, spotify_nonzero_pop$Artist.Genres))
str <- paste(genre,":", genre_count)
print(str)
}
colnames(spotify)
# add only the variables we are interested in
columns = c("Popularity", "Artist.Genres", "Explicit", colnames(spotify)[first_index:second_index], "Release.Year")
spotify = spotify[, columns]
colnames(spotify)
# take away the ones that have a popularity of 0
spotify = spotify[spotify$"Popularity" > 0, ]
# create helper function to transform genres into pop/rock
transform_genre = function(x) {
if (grepl("pop", x, ignore.case = TRUE) & grepl("rock", x, ignore.case = TRUE)) {
"Both"
} else if (grepl("pop", x, ignore.case = TRUE)) {
"Pop"
} else if (grepl("rock", x, ignore.case = TRUE)) {
"Rock"
} else {
"Other"
}
}
spotify$genreSimplified = unlist(lapply(spotify$Artist.Genres, function(x) transform_genre(x)))
unique(spotify$genreSimplified)
table(spotify$genreSimplified)
barplot(table(spotify$genreSimplified), main = "Count of Pop/Rock/Both/Other", xlab = "Genres")
spotify = subset(spotify, select = -Artist.Genres)
colnames(spotify)
lapply(spotify, class)
spotify$Explicit = as.factor(spotify$Explicit)
spotify$Release.Year = as.numeric(spotify$Release.Year)
spotify$genreSimplified = as.factor(spotify$genreSimplified)
corr_numeric <- spotify %>%
select_if(is.numeric)
# Correlation Matrix
spotify_cor <- cor(corr_numeric)
# Visualization of Correlation Matrix
spotify_corrplot <- corrplot(spotify_cor, method = "color", addCoef.col = 1, number.cex = 0.7)
# interested in the spread of each genre
boxplot(spotify$Popularity~spotify$genreSimplified, xlab = "Genres", ylab = "Popularity", main = "Popularity vs Genres")
hist(spotify$Popularity[spotify$genreSimplified == "Pop"], breaks = "FD", main = "Popularity Distribution of Pop Songs", xlab = "Popularity Score")
# find mean of popularity if the song is a pop song
mean(spotify$Popularity[spotify$genreSimplified == "Pop"])
hist(spotify$Popularity[spotify$genreSimplified == "Rock"], breaks = "FD", main = "Popularity Distribution of Rock Songs", xlab = "Popularity Score")
# find mean of popularity if the song is a rock song
mean(spotify$Popularity[spotify$genreSimplified == "Rock"])
hist(spotify$Popularity[spotify$genreSimplified == "Both"], breaks = "FD", main = "Popularity Distribution of Pop and Rock Songs", xlab = "Popularity Score")
# find mean of popularity if the song is both a pop and rock song
mean(spotify$Popularity[spotify$genreSimplified == "Both"])
hist(spotify$Popularity[spotify$genreSimplified == "Other"], breaks = "FD", main = "Popularity Distribution of Other Songs", xlab = "Popularity Score")
# find mean of popularity if the song is neither a pop nor song
mean(spotify$Popularity[spotify$genreSimplified == "Other"])
# determine if means of popularity is different for each group
aov1 = aov(Popularity ~ genreSimplified, data = spotify)
summary(aov1)
sum(spotify$Explicit == "false")
sum(spotify$Explicit == "true")
boxplot(spotify$Popularity~spotify$Explicit, xlab = "Explicit", ylab = "Popularity", main = "Popularity vs Explicit")
# look for normality regarding the popularity of non-explicit songs
hist(spotify$Popularity[spotify$Explicit == "false"], breaks = "FD", main = "Popularity Distribution of Non-Explicit Songs", xlab = "Popularity Score")
# look for normality regarding the popularity of explicit songs
hist(spotify$Popularity[spotify$Explicit == "true"], breaks = "FD", main = "Popularity Distribution of Explicit Songs", xlab = "Popularity Score")
# despite knowing normality is failed for explicit songs, perform the t-test anyway and see if means are independent
t.test(Popularity~Explicit, data = spotify)
table(spotify$genreSimplified, spotify$Explicit)
prop.table(table(spotify$genreSimplified, spotify$Explicit))
# see if both of our categorical variables are independent using chi square test
chisq.test(table(spotify$genreSimplified, spotify$Explicit))
# perform levene's test to see whether or not population variances are equal
leveneTest(Popularity ~ Explicit*genreSimplified, data = spotify)
# determine if adding both into anova helps
aov2 = aov(Popularity ~ Explicit*genreSimplified, data = spotify)
summary(aov2)
interaction.plot(spotify$Explicit, spotify$genreSimplified, spotify$Popularity,
xlab = "Explicit",
ylab = "Mean of Popularity",
trace.label = "Genres")
#set "Other" as reference level for genre
spotify$genreSimplified <- relevel(spotify$genreSimplified, ref = "Other")
levels(spotify$genreSimplified)
set.seed(213)
## use 80% of data to train
ntrain = as.integer(nrow(spotify) * 0.8)
## shuffle the rows
shuffled_index = sample(nrow(spotify))
train.index = shuffled_index[1:ntrain]
spotifyTrain = spotify[train.index,]
spotifyTest = spotify[-train.index,]
dim(spotifyTrain)
dim(spotifyTest)
lm1 = lm(Popularity ~ (.), data = spotifyTrain)
summary(lm1)
lm2 <- lm(Popularity ~ .^2, data = spotifyTrain)
summary(lm2)
#model with only significant interaction terms
lm3 <- lm(Popularity ~ Explicit + Danceability + Energy + Key + Loudness + Mode + Speechiness
+ Acousticness + Instrumentalness + Liveness + Valence + Tempo +
Time.Signature + Release.Year + genreSimplified +
Explicit*Valence + Explicit*Release.Year + Explicit*genreSimplified
+ Danceability*Energy + Danceability*Liveness + Energy*Key +
+ Energy*Instrumentalness + Key*Acousticness + Key*Liveness +
Loudness*Release.Year + Mode*Tempo + Acousticness*Instrumentalness +
Acousticness*genreSimplified + Valence*Release.Year
+ Release.Year*genreSimplified, data = spotifyTrain)
summary(lm3)
vif(lm1)
vif(lm2)
vif(lm3)
# create helper function to find mae and rmse
errors = function(mod, test) {
preds = predict(mod, test)
err = test$Popularity - preds
mae = mean(abs(err))
rmse = sqrt(mean(err^2))
c(mae, rmse)
}
errors(lm1, spotifyTest)
errors(lm2, spotifyTest)
errors(lm3, spotifyTest)
print(paste0("Model 1 R^2: ", summary(lm1)$r.squared))
print(paste0("Model 2 R^2: ", summary(lm2)$r.squared))
print(paste0("Model 3 R^2: ", summary(lm3)$r.squared))
print(paste0("Model 1 R^2: ", summary(lm1)$adj.r.squared))
print(paste0("Model 2 R^2: ", summary(lm2)$adj.r.squared))
print(paste0("Model 3 R^2: ", summary(lm3)$adj.r.squared))
AIC(lm1)
AIC(lm2)
AIC(lm3)
plot(lm1)
ncvTest(lm1)
lm5 <- lm(sqrt(Popularity) ~ (.), data = spotifyTrain)
summary(lm5)
plot(lm5)
#trying weighted least squares
lm_weights <- 1/lm(abs(lm1$residuals) ~ lm1$fitted.values)$fitted.values^2
lm2_weighted <- lm(Popularity ~ (.)^2, data = spotifyTrain, weights = lm_weights)
summary(lm2_weighted)
plot(lm2_weighted)
lambda <- BoxCox.lambda(spotify$Popularity)
boxcox_pop <- spotifyTrain$Popularity^(lambda)
lm1_boxcox <- lm(boxcox_pop ~ . , data=spotifyTrain)
summary(lm1_boxcox)
plot(lm1_boxcox)
train.loocv <- trainControl(method = "LOOCV")
model.loocv1 <- train(Popularity ~ (.), data = spotifyTrain,
method = "lm",
trControl = train.loocv)
